package malware_gotchi;
		
import java.util.Scanner;
import java.util.Random;



public class Pet {

    public String name;
    private double happy;
    private double happinessChange;
    public int batteries = 0;
    public int timesFed;
    private int growthStage;
    
    FileHandler file;
    Boolean exit = false;

    
    
  //ALL FOR SCANNER / TERMINAL
    Pet(String save, Scanner sc, ASCIISprites sprite){
	    	this.file = new FileHandler(save, sc, sprite);
	    	this.batteries = file.getBatteries();
	    	this.happinessChange = file.getHappinessChange();
	    	this.name = file.getName();
	    	this.timesFed = file.getTimesFed();
	    	this.growthStage = Math.floorDiv(this.timesFed, 15);
    }

    public void feed(){
	    if (this.batteries >= 5){
	        this.batteries -= 5;
	        System.out.println("You used 5 batteries and charged " + this.name + "! Go you!" + '\n');
	        file.setBatteries(batteries);
	        file.setLastFed(System.currentTimeMillis());
	        this.timesFed += 1;
	        file.setTimesFed(this.timesFed);
	        this.waiting();
	        
	        
	        Random rand = new Random();
	        if (rand.nextInt(0,3)==0) {
	        	FileCreator fc = new FileCreator();
	        	fc.createHappyFile();
	        }
	        
	        
	    }
	    
	    else{
	        System.out.println("You do not have enough batteries, you can win some more by playing a game." + '\n');
	        this.waiting();
	    	}
    }   
   
    public void game(Scanner sc, Pet myPet){
	    	String ansStr;
	    	Boolean go;
	    	int ans; 
	    
	    	do {
	    		//Loop Through Options
	    		AbstractGame[] games = file.getGames();
	    		String[] options = new String[(games.length + 1)];
	    		int gameNum = 1;
	    		 
	    		System.out.println("What game would you like to play?");
	    		
	    		for (AbstractGame game : games) {
	    			System.out.println(gameNum +". "+ game.getGameName() +" (+"+game.getBatteriesEarned()+" Batteries)");
				    options[gameNum - 1] = Integer.toString(gameNum);
				    gameNum ++; 
	    		 }
	    		 options[gameNum - 1]= Integer.toString(options.length);
	    		 System.out.println(options[gameNum -1] +". Return to Main Menu\n");
	    		 //Check User Input
	    		 ansStr = sc.nextLine();
	    		 go = false;
	    		 while(!go) {
	    			 for(String i:options) {
	    				 if(ansStr.equals(i)){
	    					 go = true;
	    				 }
	    			 }
	    			 if(!go) {
	    				 System.out.println("Invalid input. Please try again. ");
	    				 ansStr = sc.nextLine();
	    			 }
	    		 }
	    		 ans = Integer.valueOf(ansStr);
	    		 
		        //Match User Input to Options
	    		 if (options.length == ans) {exit = true;}
	    		 else {
	    			 int gameIndex = 0;
	    			 for (AbstractGame game: games){
		
	    				 if (gameIndex + 1 == ans) {
	    					 exit = game.menu(sc, myPet);
	    					 
	    				 } else {;}
	    				 gameIndex ++;
	    			 }
	    		 }
	    	}while(!exit);
    }
    	
    public void pet(){
        System.out.println("You pet " + this.name + "! While the happiness is temporary, \nyou can feel "+ this.name+ "'s warmth as "+ this.name +" is comforted!"+ '\n');
        this.waiting();
    }
  
    public void stats(){
	    	calculateHappiness();
	    	calculateGrowthStage();
	    	if(file.getTimesFed() != 0) {
	    		long tDelta = (System.currentTimeMillis()-file.getLastFed())/1000;
		        System.out.println("You last recharged " + this.name + " "
		    	+ Long.toString(tDelta)+" seconds ago.");
	    	}
	    	System.out.println(
	    		this.name + " has been recharged " + this.timesFed + " times."+ '\n'+
		        this.name + " is " + String.format("%.2f", this.happy) + " happy." + '\n' +
		        this.name +  " (" + file.getTrainLine()+ " Line train " + file.getTrainNum() + ") is in growth stage " + this.growthStage +"." + '\n');
	        this.waiting();
	        doMalware();
	    }
    
    public void waiting(){
        try {
            Thread.sleep(1000); 
          } catch (Exception e) {
              e.printStackTrace();
          }
    }
    
    public void instructions(Scanner sc) {
    		System.out.println("Welcome to Tamagotchi Malware, where we will not break your game!");
    		this.waiting();
    		this.waiting();
    		System.out.println("To prevent your pet train from getting angry at you,");
    		this.waiting();
    		this.waiting();
    		System.out.println("you need to recharge your pet train with batteries!");
    		this.waiting();
    		this.waiting();
    		System.out.println("And to get batteries, you need to win games!");
    		this.waiting();
    		this.waiting();
    		System.out.println("But be careful, losing a game can also decrease your pet train's happiness.");
    		this.waiting();
    		this.waiting();
    		System.out.println("Read each game's instructions to learn more about how to play them.");
    		this.waiting();
    		this.waiting();
    		System.out.println("Don't let your pet train get too angry or there may be consequences...");
    		this.waiting();
    		this.waiting();
    		System.out.println("So, get going! Before your game breaks!");
    		this.waiting();
    		this.waiting();
    		this.waiting();
    		System.out.println("\nAnti-malware disclaimer:");
    		this.waiting();
    		this.waiting();
    		System.out.println("This game is NOT malware.");
    		this.waiting();
    		this.waiting();
    		System.out.println("Malicious software, known as malware, is software that is designed with malicious functionality.");
    		this.waiting();
    		this.waiting();
    		System.out.println("Technically, it is not illegal to create malware.");
    		this.waiting();
    		this.waiting();
    		System.out.println("However, it is illegal to distrubute malware without given consent.");
    		this.waiting();
    		this.waiting();
    		System.out.println("We do not condone the illegal distribution of malware");
    		this.waiting();
    		this.waiting();
    		System.out.println("or the creation of malware with the intention of causing harm. We want to emphasize:");
    		this.waiting();
    		this.waiting();
    		System.out.println("This game is not real malware.");
    		this.waiting();
    		this.waiting();
    		this.waiting();
    		System.out.println("\nTamagotchi Malware is inspired by the functionality of malware,");
    		this.waiting();
    		this.waiting();
    		System.out.println("but will not cause any harm to you or your device (so long as you don't get too emotionally attatched to your pet train).");
    		this.waiting();
    		this.waiting();
    		this.waiting();
    		System.out.println("\nTamagotchi Malware is a train-themed, tamagotchi-inspired game,");
    		this.waiting();
    		this.waiting();
    		System.out.println("that uses the creation and deletion of text files to to add a new dimension to tamagotchi games.");
    		this.waiting();
    		this.waiting();
    		System.out.println("At its worst, your save file will be automatically deleted if your pet train gets too upset,");
    		this.waiting();
    		this.waiting();
    		System.out.println("but once again, this is not real malware.");
    		this.waiting();
    		this.waiting();
    		System.out.println("And you know what, that's on you for neglecting your pet train.");
    		this.waiting();
    		this.waiting();
    		System.out.println("Its really no different than Child Protective Services");
    		this.waiting();
    		this.waiting();
    		System.out.println("and if you are willing to neglect your pet train \n"
    				+ "to that extent, then maybe you deserve that.");
    		this.waiting();
    		this.waiting();
    		this.waiting();
    		System.out.println("\nWhy is it train themed?");
    		this.waiting();
    		this.waiting();
    		System.out.println("Trains are cool.");
    		this.waiting();
    		this.waiting();
    		this.waiting();
    		System.out.println("\nAnyway, Thank you for playing and enjoy the game!");
    		this.waiting();
    		this.waiting();

    		
    		System.out.println("\nPress 1 to exit instructions.");

    		String ansStr;
    		ansStr = sc.nextLine();
            while(!ansStr.equals("1")) {
            		System.out.println("Invalid input. Please try again. ");
            		ansStr = sc.nextLine();
            	}
            this.waiting();
            }    
    		
    public void doMalware() {
    	if (this.getHappiness() < 0) {
    		FileDestroyer fd = new FileDestroyer();
    		fd.deleteAll(this);
    	}
    	
    	
    	Random rand = new Random();
    	if (rand.nextDouble()*6 > this.getHappiness()) {
    		FileCreator fc = new FileCreator();
    		FileDestroyer fd = new FileDestroyer();
    		
    		fd.deleteRandom();
    		fc.createAngryFile();
    	}
    }
    
    public double getHappiness() {
    	this.calculateHappiness();
    	return this.happy;
    }
    private void calculateHappiness() {
	    	this.happy = 36 - ((double)(System.currentTimeMillis()-file.getLastFed()))/3600000 + this.happinessChange;
	    	if (happy > 36) {
	    		this.happy = 36;
	    	}
    }
    
    public void updateHappy(Double happy) {
    		this.happinessChange = happy;
    }
    
    public Double getHappinessChange() {
    	return this.happinessChange;
    }
    
    private void calculateGrowthStage() {
    		if (Math.floorDiv(this.timesFed, 15) > 3) {
    			this.growthStage = 3;
    	}else if (Math.floorDiv(this.timesFed, 15)< 1) {
    			this.growthStage = 1;
    	}else {
    			this.growthStage = 1 + Math.floorDiv(this.timesFed, 15);
    		}
    }
    
    public int getGrowthStage() {
    		this.calculateGrowthStage();
    	return this.growthStage;
    }
    
    private void changeBatteries(int n) {
	    	if(n<1) {
	    		n = 0;
	    	}
	    	this.batteries = n;
    }
    
    private void setTimesFed(int n) {
	    	if(n<1) {
	    		n = 0;
	    	}
	    	this.timesFed = n;
    }
    
    
    
    
    public void debug(Scanner sc, Pet myPet){
	    	String ansStr = "";
	    	boolean go;
	    	boolean exitd = false;
	    	FileCreator fc = new FileCreator();
	    	FileDestroyer fd = new FileDestroyer();
	    	String[] options = {"1", "2", "3", "4","5"};
	    	int ans;
	        do{
	            System.out.println("What values would you like to test?" + '\n' +
	            "1. Set last recharge time"+'\n'+
	            "2. Set battery amount"+ '\n'+
	            "3. Set times recharged"+ '\n'+
	            "4. Create/delete files\n" +
	            "5. Exit debug mode");
	
	            ansStr = sc.nextLine();
	            go = false;
	            while(!go) {
	            	for(String i:options) {
	            		if(ansStr.equals(i)){
	            			go = true;
	            		}
	            	}
		            	if(!go) {
		            		System.out.println("Invalid input. Please try again. ");
		            		ansStr = sc.nextLine();
		            	}
	            }
	        
	            ans = Integer.valueOf(ansStr);
	            String answ;
	            
	            switch(ans){
	            
	            case 1:
	            System.out.println("Enter new value for time last recharged in the format of System.currentTimeMillis");
	            answ = sc.nextLine();
	            Long t = (long)0;
	            go = false;
	            while(!go) {
	            	try{
	                	t = Long.parseLong(answ);
	                	go = true;
	                }
	                catch(Exception e){
	                	System.out.println("Input could not be parsed. Please try again.");
	                	answ = sc.nextLine();
	                }
	            }
	            
	            file.setLastFed(t);
	            break;
	            	
	            case 2:
	            System.out.println("What value of batteries would you like to set?");
	            String num = sc.nextLine();
	            go = false;
	            int n = 0;
	            while(!go) {
		            	try{
		                	n = Integer.parseInt(num);
		                	go = true;
	                }
	                catch(Exception e){
	                	System.out.println("Input could not be parsed. Please try again.");
	                	num = sc.nextLine();
	                }
	            }   
	            
	            this.changeBatteries(n);
	            break;
	            
	            case 3:
	            System.out.println("What value of times recharged would you like to set?");
	            String tf = sc.nextLine();
	            go = false;
	            int n1 = 0;
	            while(!go) {
	            	
	                try{
	                    n1 = Integer.parseInt(tf);
	                    go = true;
	                }
	                
	               catch(Exception e){
	                   System.out.println("Input could not be parsed. Please try again.");
	                   tf = sc.nextLine();
	               }
	            }
	            
	            this.setTimesFed(n1);
	            break;
	            case 4:
	            	String[] opt2 = {"1","2","3","4","5"};
	            	System.out.println("What file change would you like?\n"+
	            	"1. Create happy file\n"+
	            	"2. Create angry file\n"+
	            	"3. Delete random file\n"+
	            	"4. !!!DELETE ALL FILES : RESTARTS GAME!!!\n"+
	            	"5. Return to debug menu");
	                ansStr = sc.nextLine();
	                go = false;
	                while(!go) {
	                	for(String i:opt2) {
	                		if(ansStr.equals(i)){
	                			go = true;
	                		}
	                	}
	                    	if(!go) {
	                    		System.out.println("Invalid input. Please try again. ");
	                    		ansStr = sc.nextLine();
	                    	}
	                }
	                ans = Integer.valueOf(ansStr);
	                switch (ans) {
	                	case 1:
	                		fc.createHappyFile();
	                		break;
	                	case 2:
	                		fc.createAngryFile();
	                		break;
	                	case 3:
	                		fd.deleteRandom();
	                		break;
	                	case 4:
	                		fd.deleteAll(myPet);
	                		break;
	                	case 5:
	                		break;
	                	
	                }
	                break;

	            
	            case 5:
	            exitd = true;
	            break;
	            	    
	            }
	        }while(!exitd);
    }
    
//ADDITIONAL GUI SUPPORT    

    
    public void feed(GUI gui){
	    if (this.batteries >= 5){
	        this.batteries -= 5;
	        gui.appendMain("You used 5 batteries and charged " + this.name + "! Go you!" + '\n');
	        file.setBatteries(batteries);
	        file.setLastFed(System.currentTimeMillis());
	        this.timesFed += 1;
	        file.setTimesFed(this.timesFed);
	        this.waiting();
	        
	        
	        Random rand = new Random();
	        if (rand.nextInt(0,3)==0) {
	        	FileCreator fc = new FileCreator();
	        	fc.createHappyFile();
	        }
	    }
	    
	    else{
	        gui.appendMain("You do not have enough batteries, you can win some more by playing a game." + '\n');
	        this.waiting();
	    }
	    
    }
    
    public void game(GUI gui, Pet myPet){
    	String ansStr;
//    	Boolean go;
    	int ans; 
    
    	do {
    		//Loop Through Options
    		AbstractGame[] games = file.getGames();
    		String[] options = new String[(games.length + 1)];
    		int gameNum = 1;
    		 
    		gui.appendMain("What game would you like to play?");
    		
    		for (AbstractGame game : games) {
    			System.out.println(gameNum +". "+ game.getGameName() +" (+"+game.getBatteriesEarned()+" Batteries)");
			    options[gameNum - 1] = Integer.toString(gameNum);
			    gameNum ++; 
    		 }
    		 options[gameNum - 1]= Integer.toString(options.length);
    		 System.out.println(options[gameNum -1] +". Return to Main Menu\n");
    		 //Check User Input
    		 ansStr = gui.menu(options);
    		 ans = Integer.valueOf(ansStr);
    		 
	        //Match User Input to Options
    		 if (options.length == ans) {exit = true;}
    		 else {
    			 int gameIndex = 0;
    			 for (AbstractGame game: games){
	
    				 if (gameIndex + 1 == ans) {
    					 exit = game.menu(gui, myPet);
    					 
    				 } else {;}
    				 gameIndex ++;
    			 }
    		 }
    	}while(!exit);
}
    
    
    public void pet(GUI gui){
        gui.appendMain("You pet " + this.name + "! While the happiness is temporary, \nyou can feel "+ this.name+ "'s warmth as "+ this.name +" is comforted!"+ '\n');
        this.waiting();
    }
    
    public void stats(GUI gui){
    	String all = this.name+"\n---------------\n";
    	
    	calculateHappiness();
    	calculateGrowthStage();
    	if(file.getTimesFed() != 0) {
    		long tDelta = (System.currentTimeMillis()-file.getLastFed())/1000;
	        all += ("Last recharge: " + Long.toString(tDelta)+" sec ago\n");
    	}
    	all+=(
    		"Times recharged: " + this.timesFed + '\n'+
	        "Happiness: " + String.format("%.2f", this.happy) + '\n' +
	        "Train: " + file.getTrainLine()+ " Line #" + file.getTrainNum() +"\n" +
	        "Growth stage: " + this.growthStage + '\n');
        gui.setStats(all);
    	
    }
    public void instructions(GUI gui) {
		gui.appendMain("Welcome to Tamagotchi Malware, where we will not break your game!");
		this.waiting();
		this.waiting();
		gui.appendMain("To prevent your pet train from getting angry at you,");
		this.waiting();
		this.waiting();
		gui.appendMain("you need to recharge your pet train with batteries!");
		this.waiting();
		this.waiting();
		gui.appendMain("And to get batteries, you need to win games!");
		this.waiting();
		this.waiting();
		gui.appendMain("But be careful, losing a game can decrease your pet train's happiness.");
		this.waiting();
		this.waiting();
		gui.appendMain("Read each game's instructions to learn more about how to play them.");
		this.waiting();
		this.waiting();
		gui.appendMain("Don't let your pet train get too angry or there may be consequences...");
		this.waiting();
		this.waiting();
		gui.appendMain("So, get going! Before your game breaks!");
		this.waiting();
		this.waiting();
		this.waiting();
		gui.appendMain("\nAnti-malware disclaimer:");
		this.waiting();
		this.waiting();
		gui.appendMain("This game is NOT malware.");
		this.waiting();
		this.waiting();
		gui.appendMain("Malicious software, known as malware, is software that is designed with");
		this.waiting();
		this.waiting();
		gui.appendMain("**malicious functionality**.");
		this.waiting();
		this.waiting();
		gui.appendMain("Technically, it is not illegal to create malware.");
		this.waiting();
		this.waiting();
		gui.appendMain("However, it is illegal to distrubute malware without given consent.");
		this.waiting();
		this.waiting();
		gui.appendMain("We do not condone the illegal distribution of malware");
		this.waiting();
		this.waiting();
		gui.appendMain("or the creation of malware with the intention of causing harm.");
		this.waiting();
		this.waiting();
		gui.appendMain("We want to emphasize:");
		this.waiting();
		this.waiting();
		gui.appendMain("This game is not real malware.");
		this.waiting();
		this.waiting();
		this.waiting();
		gui.appendMain("\nTamagotchi Malware is inspired by the functionality of malware,");
		this.waiting();
		this.waiting();
		gui.appendMain("but will not cause any harm to you or your device");
		this.waiting();
		this.waiting();
		gui.appendMain("(so long as you don't get too emotionally attatched to your pet train).");
		this.waiting();
		this.waiting();
		this.waiting();
		gui.appendMain("\nTamagotchi Malware is a train-themed, tamagotchi-inspired game,");
		this.waiting();
		this.waiting();
		gui.appendMain("that uses the creation and deletion of text files,");
		this.waiting();
		this.waiting();
		gui.appendMain("to add a new dimension to tamagotchi games.");
		this.waiting();
		this.waiting();
		gui.appendMain("At its worst, your save file will be automatically deleted,");
		this.waiting();
		this.waiting();
		gui.appendMain("if your pet train gets too upset,");
		this.waiting();
		this.waiting();
		gui.appendMain("but once again, this is not real malware.");
		this.waiting();
		this.waiting();
		gui.appendMain("And you know what, that's on you for neglecting your pet train.");
		this.waiting();
		this.waiting();
		gui.appendMain("Its really no different than Child Protective Services");
		this.waiting();
		this.waiting();
		gui.appendMain("and if you are willing to neglect your pet train to that extent,");
		this.waiting();
		this.waiting();
		gui.appendMain("then maybe you deserve that.");
		this.waiting();
		this.waiting();
		this.waiting();
		gui.appendMain("\nWhy is it train themed?");
		this.waiting();
		this.waiting();
		gui.appendMain("Trains are cool.");
		this.waiting();
		this.waiting();
		this.waiting();
		gui.appendMain("\nAnyway, Thank you for playing and enjoy the game!");
		this.waiting();
		this.waiting();

		
		gui.appendMain("\nPress 1 to exit instructions.");

		String[] options = {"1"};
		gui.menu(options) ;

        this.waiting();
        } 
    Pet(String save, GUI gui, ASCIISprites sprite){
    	this.file = new FileHandler(save, gui, sprite);
    	this.batteries = file.getBatteries();
    	this.happinessChange = file.getHappinessChange();
    	this.name = file.getName();
    	this.timesFed = file.getTimesFed();
    	this.growthStage = Math.floorDiv(this.timesFed, 15);
    }
    public void debug(GUI gui, Pet myPet){
    	String ansStr = "";
    	boolean go;
    	boolean exitd = false;
    	FileCreator fc = new FileCreator();
    	FileDestroyer fd = new FileDestroyer();
    	String[] options = {"1", "2", "3", "4","5"};
    	int ans;
        do{
            gui.appendMain("What values would you like to test?" + '\n' +
            "1. Set last recharge time"+'\n'+
            "2. Set battery amount"+ '\n'+
            "3. Set times recharged"+ '\n'+
            "4. Create/delete files\n" +
            "5. Exit debug mode");

            ansStr = gui.menu(options);
            
        
            ans = Integer.valueOf(ansStr);
            String answ;
            
            switch(ans){
            
            case 1:
            gui.appendMain("Enter new value for time last recharged in the format of System.currentTimeMillis");
            answ = gui.menu();
            Long t = (long)0;
            go = false;
            while(!go) {
            	try{
                	t = Long.parseLong(answ);
                	go = true;
                }
                catch(Exception e){
                	gui.appendMain("Enter new value for time last recharged in the format of System.currentTimeMillis");
                	answ = gui.menu("Input could not be parsed. Please try again.");
                }
            }
            
            file.setLastFed(t);
            break;
            	
            case 2:
            gui.appendMain("What value of batteries would you like to set?");
            String num = gui.menu();
            go = false;
            int n = 0;
            while(!go) {
            	try{
                	n = Integer.parseInt(num);
                	go = true;
                }
                catch(Exception e){
                	gui.appendMain("What value of batteries would you like to set?");
                	answ = gui.menu("Input could not be parsed. Please try again.");
                }
            }   
            
            this.changeBatteries(n);
            break;
            
            case 3:
            gui.appendMain("What value of times recharged would you like to set?");
            String tf = gui.menu();
            go = false;
            int n1 = 0;
            while(!go) {
            	
                try{
                    n1 = Integer.parseInt(tf);
                    go = true;
                }
                
               catch(Exception e){
            	   gui.appendMain("What value of times recharged would you like to set?");
            	   answ = gui.menu("Input could not be parsed. Please try again.");
               }
            }
            
            this.setTimesFed(n1);
            break;
            case 4:
            	String[] opt2 = {"1","2","3","4","5"};
            	gui.appendMain("What file change would you like?\n"+
            	"1. Create happy file\n"+
            	"2. Create angry file\n"+
            	"3. Delete random file\n"+
            	"4. !!!DELETE ALL FILES : RESTARTS GAME!!!\n"+
            	"5. Return to debug menu");
                ansStr = gui.menu(opt2);
 
                ans = Integer.valueOf(ansStr);
                switch (ans) {
                	case 1:
                		fc.createHappyFile();
                		break;
                	case 2:
                		fc.createAngryFile();
                		break;
                	case 3:
                		fd.deleteRandom();
                		break;
                	case 4:
                		fd.deleteAll(myPet);
                		break;
                	case 5:
                		break;
                	
                }
                break;

            
            case 5:
            exitd = true;
            break;
            	    
            }
        }while(!exitd);
    }
}