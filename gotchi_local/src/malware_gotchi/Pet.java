package malware_gotchi;

import java.util.Scanner;

public class Pet {

    public String name;
    private double happy;
    private double happinessChange;
    int batteries = 0;
    int timesFed;
    private int growthStage;
    
    FileHandler file;
    Boolean exit = false;

    Pet(String save){
    	this.file = new FileHandler(save);
    	this.batteries = file.getBatteries();
    	this.happinessChange = file.getHappinessChange();
    	this.name = file.getName();
    	this.timesFed = file.getTimesFed();
    	this.growthStage = Math.floorDiv(this.timesFed, 15);
    
    }

    public void feed(){
    if (this.batteries >= 5){
        this.batteries -= 5;
        System.out.println("You used 5 batteries and fed " + this.name + "! Go you!" + '\n');
        file.setBatteries(batteries);
        file.setLastFed(System.currentTimeMillis());
        this.timesFed += 1;
        file.setTimesFed(this.timesFed);
        this.waiting();
        }
    
    else{
        System.out.println("You do not have enough batteries, you can win some more by playing a game." + '\n');
        this.waiting();
    	}
    }
    
   
    public void game(Scanner sc, Pet myPet){

    	AbstractGame leftRight = new LeftRightGame("malware_gotchi/petData.csv");
    	
    	//String[] gameArray = file.getGames(); //need to convert gameArray items from String to objects of the GameArray class
    	String[] options = {"1", "2", "3", "4"};
    	String ansStr;
    	Boolean go;
    	int ans; 
    	do {
    	System.out.println("What game would you like to play?\n"
    		 + "1. "+ leftRight.getGameName() +" (+"+leftRight.getBatteriesEarned()+" Batteries)\n"
    			+ "2. Trainman (+N Batteries) \n"
    			+ "3. Gambling (+N Batteries)\n"
    			+ "4. Return to Main Menu\n");
    	
        ansStr = sc.next();
        go = false;
        while(!go) {
        	for(String i:options) {
        		if(ansStr.equals(i)){
        			go = true;
        		}
        	}
        	if(!go) {
        		System.out.println("Invalid input. Please try again. ");
        		ansStr = sc.next();
        	}
        }
        
        ans = Integer.valueOf(ansStr);
    	switch(ans) {
    		case 1:
	    		exit = leftRight.menu(sc, myPet);
    		
    		case 2:
    			break;
    			
    		case 3:
    			break;
    			
    		case 4:
    			exit=true;
    			break;
    	}
    	
   
    }while(!exit);
    	
    }
    	
  
    public void pet(){
        System.out.println("You pet " + this.name + "! While the happiness is temporary, you can feel its warmth as it is comforted!"+ '\n');
        this.waiting();
    }

    public void stats(){
    	calculateHappiness();
    	calculateGrowthStage();
    	long tDelta = (System.currentTimeMillis()-file.getLastFed())/1000;
        System.out.println("You last fed " + this.name + " "
    	+ Long.toString(tDelta)+" seconds ago." + '\n' + 
    	this.name + " has been fed " + this.timesFed + " times."+ '\n'+
        this.name + " is " + String.format("%.2f", this.happy) + " happy." + '\n' +
        this.name + " is in growth stage " + this.growthStage +"." + '\n');
        this.waiting();
    }
    public void waiting(){
        try {
            Thread.sleep(500); 
          } catch (Exception e) {
              e.printStackTrace();
          }
    }
    public void instructions() {
    	System.out.println("Welcome to Tamagotchi Malware, where we will not crash your computer! \n"
    			+ "To prevent your pet from getting angry at you, you need to feed it batteries! And to get batteries, you need to win games! But be careful, losing a game can also decrease your pets happiness. Each game has its own instructions for details. So, get going! Before your computer breaks!\n");
    }
    private void calculateHappiness() {
    	this.happy = 36 - ((double)(System.currentTimeMillis()-file.getLastFed()))/3600000 + this.happinessChange;
    	if (happy > 36) {
    		this.happy = 36;
    	}
    }
    
    public void updateHappy(Double happy) {
    	this.happinessChange = happy;
    }
    public Double getHappinessChange() {
    	return this.happinessChange;
    }
    private void calculateGrowthStage() {
    	this.growthStage = Math.floorDiv(this.timesFed, 15);
    }
    
    private void changeBatteries(int n) {
    	if(n<1) {
    		n = 0;
    	}
    	this.batteries = n;
    }
    
    private void setTimesFed(int n) {
    	if(n<1) {
    		n = 0;
    	}
    	this.timesFed = n;
    }
    
    public void debug(Scanner sc){
    	String ansStr = "";
    	boolean go;
    	boolean exitd = false;
    	String[] options = {"1", "2", "3", "4"};
    	int ans;
        do{
            System.out.println("What values would you like to test?" + '\n' +
            "1. Set last fed time"+'\n'+
            "2. Set battery amount"+ '\n'+
            "3. Set times fed"+ '\n'+
            "4. Exit debug mode");

            ansStr = sc.next();
            go = false;
            while(!go) {
            	for(String i:options) {
            		if(ansStr.equals(i)){
            			go = true;
            		}
            	}
            	if(!go) {
            		System.out.println("Invalid input. Please try again. ");
            		ansStr = sc.next();
            	}
            }
        
            ans = Integer.valueOf(ansStr);
            String answ;
            
            switch(ans){
            
            case 1:
            System.out.println("Enter new value for time last fed in the format of System.currentTimeMillis");
            answ = sc.next();
            Long t = (long)0;
            go = false;
            while(!go) {
            	try{
                	t = Long.parseLong(answ);
                	go = true;
                }
                catch(Exception e){
                	System.out.println("Input could not be parsed. Please try again.");
                	answ = sc.next();
                }
            }
            
            file.setLastFed(t);
            break;
            	
            case 2:
            System.out.println("What value of batteries would you like to set?");
            String num = sc.next();
            go = false;
            int n = 0;
            while(!go) {
            	try{
                	n = Integer.parseInt(num);
                	go = true;
                }
                catch(Exception e){
                	System.out.println("Input could not be parsed. Please try again.");
                	num = sc.next();
                }
            }
                
            
            this.changeBatteries(n);
            break;
            
            case 3:
            System.out.println("What value of timesFed would you like to set?");
            String tf = sc.next();
            go = false;
            int n1 = 0;
            while(!go) {
            	
                try{
                    n1 = Integer.parseInt(tf);
                    go = true;
               }
                
               catch(Exception e){
                   System.out.println("Input could not be parsed. Please try again.");
                   tf = sc.next();
               }
            }
            
            this.setTimesFed(n1);
            break;
            
            case 4:
            exitd = true;
            break;
            	    
            }
        }while(!exitd);
    

}
}