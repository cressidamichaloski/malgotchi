package malware_gotchi;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;



public class FileHandler {
	PetData[] dataArray = new PetData[64];
	String fName;

    FileHandler(String source, Scanner sc){
    	fName = source;
	    try{
	    	int i = 0;
	        File petDataFile = new File(source);
	        Scanner sc1 = new Scanner(petDataFile);
	        while (sc.hasNextLine()){
	            String data = sc.nextLine();
	            //System.out.println(data);
	            dataArray[i] = extractData(data);
	            i+=1;
	        sc1.close();
	        }

    
	    } catch (FileNotFoundException e) {
            System.out.println("Error! Could not find a pet data save file!");
            //System.out.println(new File(".").getAbsolutePath());
            System.out.println("Looks like you need a new pet!");
            File petDataFile = new File(source);
            FileWriter fw = null;
			try {
				fw = new FileWriter(petDataFile);
			} catch (IOException e1) {
				e1.printStackTrace();
			}
            //Scanner sc = new Scanner(System.in);
            String name = "";
            System.out.println("What would you like to name your new pet?");
            name = sc.next();
            while (name =="") {
            	System.out.println("You have to give your pet a name! Type a name, then press enter.");
            	name = sc.next(); //Might add more type checking later.
            }
            try {
				long time = System.currentTimeMillis();
            	fw.append("0,petName,String," +name+"\n"
						+"1,lastFed,long,"+ time+"\n"
						+"2,batteries,int,0"+"\n"
						+"3,happinessChange,double,0.0"+"\n"
						+"4,timesFed,int,0"+"\n"
						+"5,gameName,AbstractGame,LeftRightGame");
            	//CHECK, does this throw an error like closing the scanner does
    	        Scanner sc1 = new Scanner(petDataFile);
    	        int i = 0;
    	        while (sc1.hasNextLine()){
    	            String data = sc1.nextLine();
    	            //System.out.println(data);
    	            dataArray[i] = extractData(data);
    	            i+=1;
    	            sc1.close();
    	        }
			} catch (IOException e1) {
				System.out.println("There was an error when processing your input.");
				e1.printStackTrace();
			}
        }
    }
    
    private PetData extractData(String line) {
    	String[] data = line.split(",");
    	return new PetData(Integer.valueOf(data[0]),data[1],data[2],data[3]);
    }
    
    private int findIndex(String item) {
    	for(PetData i:dataArray) {if (i!=null) {
    		if (item.equals(i.getVarName())){
    			return i.getIndex();
    		}
    		//System.out.println(i.getVarName());
    	}
    	}
    	return 0;
    }
    
    private void save() {
    	try {
			FileWriter dataFile = new FileWriter("petData.csv");
			for(PetData i : dataArray) {
				if(i!=null) {dataFile.write(i.toString());}
	    	}
			dataFile.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
    }

    public int getBatteries() {
    	int i = findIndex("batteries");
    	return Integer.valueOf(dataArray[i].getData());
    }
    
    public void setBatteries(int data) {
    	int i = findIndex("batteries");
    	dataArray[i].setData(Integer.toString(data));
    	save();
    }
    
    public String getName() {
    	int i = findIndex("petName");
    	return dataArray[i].getData();
    }
    
    public long getLastFed() {
    	int i = findIndex("lastFed");
    	return Long.valueOf(dataArray[i].getData());
    }
    
    public void setLastFed(long data) {
    	int i = findIndex("lastFed");
    	dataArray[i].setData(Long.toString(data));
    	save();
    }
    
    public int getTimesFed() {
    	int i = findIndex("timesFed");
    	return Integer.valueOf(dataArray[i].getData());
    }
    
    public void setTimesFed(int data) {
    	int i = findIndex("timesFed");
    	dataArray[i].setData(Integer.toString(data));
    	save();
    }
    
    public void setHappinessChange(Double data) {
    	int i = findIndex("happinessChange");
    	dataArray[i].setData(Double.toString(data));
    }
    
    public Double getHappinessChange() {
    	int i = findIndex("happinessChange");
    	return Double.valueOf(dataArray[i].getData());
    }
    
    public AbstractGame[] getGames() { 
    	String[] gameNamesString = new String[64];
    	int gamesCount = 0;
 
    	for(PetData i:dataArray) {
    		if (i!=null) {
    			if (i.getVarName().equals("gameName")){
    				gameNamesString[gamesCount] = i.getData(); 
    				gamesCount ++;
    			}
    		}
    	}
    	AbstractGame[] gamesNames = new AbstractGame[gamesCount];
    	gamesCount = 0;
    	for (String s: gameNamesString) {
    		if (s != null) {
    		Object gameObject;
			try {
				gameObject = Class.forName("malware_gotchi."+ s).getDeclaredConstructor().newInstance();
				AbstractGame gameAbObject = (AbstractGame)gameObject;
				gamesNames[gamesCount] = gameAbObject; 	
			} catch (InstantiationException | IllegalAccessException | IllegalArgumentException
					| InvocationTargetException | NoSuchMethodException | SecurityException
					| ClassNotFoundException e) {
				e.printStackTrace();
			} 
    		}
    	}
    	return gamesNames;
    }
}