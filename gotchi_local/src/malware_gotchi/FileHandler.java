package malware_gotchi;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Random;
import java.util.Scanner;
import java.util.regex.*;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.time.LocalDate;
import java.net.URISyntaxException;



public class FileHandler {
	PetData[] dataArray = new PetData[64];
	String fName;

    FileHandler(String source, Scanner sc, ASCIISprites sprite){
    	fName = source;
	    try{
	    	int i = 0;
	        File petDataFile = new File(fName);
	        Scanner sc1 = new Scanner(petDataFile);

	        while (sc1.hasNextLine()){
	            String data = sc1.nextLine();
	            dataArray[i] = extractData(data);
	            i+=1;
	        }
	        sc1.close();
	        

    
	    }catch (FileNotFoundException e) {
            System.out.println("Error! Could not find a pet train data save file!");
            //System.out.println(new File(".").getAbsolutePath());
            System.out.println("Looks like you need a new pet train!");
            sprite.showEgg();
            //File petDataFile = new File(source);
           
            String name = "";
            System.out.println("What would you like to name your new pet train?");
            name = sc.nextLine();
            while (!checkName(name)) {
            	name = sc.nextLine(); //Might add more type checking later. No commas or quotes, please!
            	//uppercase, lowercase, and spaces, limit is 20 char
            }

           System.out.println("Time for us to find a train! Drumroll, please!\n");
           int loop = 0; 
	   		while (loop < 3) {
	   	            try {
						Thread.sleep(1000);
					} catch (InterruptedException e1) {
						e1.printStackTrace();
					} 
	   				System.out.print(".");
	   				loop++;
	   				}

	           String trainLine = assignTrainLine(); //sets trainLine then calls setTrainNum()
           int trainNum = assignTrainNum(trainLine);
           System.out.println("\n\nYour pet train " + name + " is " + trainLine + " Line train " + trainNum + "!");
           
           
				Long time = System.currentTimeMillis();
				String l0 = String.join("", "0,petName,String,", name);
				PetData line0 = extractData(l0);
				dataArray[0] = line0;
				String l1 = String.join("", "1,lastFed,String,", time.toString());
				PetData line1 = extractData(l1);
				dataArray[1] =line1;
				PetData line2 = extractData("2,batteries,int,0");
				dataArray[2] = line2;
				PetData line3 = extractData("3,happinessChange,double,0.0");
				dataArray[3] = line3;
				PetData line4 = extractData("4,timesFed,int,0");
				dataArray[4] = line4;
				PetData line5 = extractData("5,gameClassName,AbstractGame,LeftRightGame");
				dataArray[5] = line5;
				PetData line6 = extractData("6,gameClassName,AbstractGame,TrainmanGame");
				dataArray[6] = line6;
				PetData line7 = extractData("7,gameClassName,AbstractGame,GamblingGame");
				dataArray[7] = line7;
				String l8 = String.join("", "8,trainLine,String,", trainLine);
				PetData line8 = extractData(l8);
				dataArray[8] = line8;
				String l9 = String.join("", "9,trainNum,int,", Integer.toString(trainNum));
				PetData line9 = extractData(l9);
				dataArray[9] = line9;
				String l10 = String.join("", "10,birthday,String,"+ LocalDate.now().toString());
				PetData line10 = extractData(l10);
				dataArray[10] = line10;
				String l11 = String.join("", "11,lastSlept,String,", time.toString());
				PetData line11 = extractData(l11);
				dataArray[11] = line11;
    	        save();

	    }
	}
    
    FileHandler(String source, GUI gui, ASCIISprites sprite){
    	fName = source;
	    try{
	    	int i = 0;
	        File petDataFile = new File(fName);
	        Scanner sc1 = new Scanner(petDataFile);

	        while (sc1.hasNextLine()){
	            String data = sc1.nextLine();
	            dataArray[i] = extractData(data);
	            i+=1;
	        }
	        sc1.close();
	        

    
	    }catch (FileNotFoundException e) {
            gui.appendMain("Error! Could not find a pet train data save file!");
            //System.out.println(new File(".").getAbsolutePath());
            gui.appendMain("Looks like you need a new pet train!");
            sprite.showEgg(gui);
            //File petDataFile = new File(source);
           
            String name = "";
            gui.appendMain("What would you like to name your new pet train?");
            name = gui.menu();
            String error = checkName(name, gui); //now has function give the error message out
            while (!error.equals("")) {
            	gui.appendMain("Looks like you need a new pet train!"); //a little clunky due to resetting text in gui
            	gui.appendMain("What would you like to name your new pet train?");
            	name = gui.menu(error); //Might add more type checking later. No commas or quotes, please!
            	//uppercase, lowercase, and spaces, limit is 20 char
            	error = checkName(name, gui);
            }
            
           gui.appendMain("Time for us to find a train! Drumroll, please!\n");
           int loop = 0; 
           while (loop < 3) {
        	   try {
        		   Thread.sleep(1000);
        	   } catch (InterruptedException e1) {
        		   e1.printStackTrace();
        	   } 
	   	       gui.appendMain(".", false); //false so it doesn't do a new line
	   	       loop++;
	   	   }

	       String trainLine = assignTrainLine(); //sets trainLine then calls setTrainNum()
           int trainNum = assignTrainNum(trainLine);
           gui.appendMain("\n\nYour pet train " + name + " is " + trainLine + " Line train " + trainNum + "!");
           
           String birthday = LocalDate.now().toString();           
           
			Long time = System.currentTimeMillis();
			String l0 = String.join("", "0,petName,String,", name);
			PetData line0 = extractData(l0);
			dataArray[0] = line0;
			String l1 = String.join("", "1,lastFed,String,", time.toString());
			PetData line1 = extractData(l1);
			dataArray[1] =line1;
			PetData line2 = extractData("2,batteries,int,0");
			dataArray[2] = line2;
			PetData line3 = extractData("3,happinessChange,double,0.0");
			dataArray[3] = line3;
			PetData line4 = extractData("4,timesFed,int,0");
			dataArray[4] = line4;
			PetData line5 = extractData("5,gameClassName,AbstractGame,LeftRightGame");
			dataArray[5] = line5;
			PetData line6 = extractData("6,gameClassName,AbstractGame,TrainmanGame");
			dataArray[6] = line6;
			PetData line7 = extractData("7,gameClassName,AbstractGame,GamblingGame");
			dataArray[7] = line7;
			String l8 = String.join("", "8,trainLine,String,", trainLine);
			PetData line8 = extractData(l8);
			dataArray[8] = line8;
			String l9 = String.join("", "9,trainNum,int,", Integer.toString(trainNum));
			PetData line9 = extractData(l9);
			dataArray[9] = line9;
			String l10 = String.join("", "10,lastSlept,String,", time.toString());
			PetData line10 = extractData(l10);
			dataArray[10] = line10;
			String l11 = String.join("", "11,birthday,String,", birthday);
			PetData line11 = extractData(l11);
			dataArray[11] = line11;
			
			save();

	    }
	}
    
    private boolean checkName(String s) {
    	boolean valid = true;
    	Matcher alphaSpace = Pattern.compile("^[a-zA-Z0-9 ]*$[\\r\\n|\\r|\\n]").matcher(s);
    	if (s=="") {
    		valid = false;
    		System.out.println("You have to give your pet train a name! Type a name, then press enter.");
    	}
    	else if (alphaSpace.matches()) {
    		valid = false;
    		System.out.println("That's not a good name! Try not using special characters.");
    	}
    	else if (s.length() > 20) {
    		valid = false;
    		System.out.println("That name's too long! It should be shorter than 20 characters.");
    	}
    	
    	
    	
    	return valid;
    }
    
    private String checkName(String s, GUI gui) {
    	String error = "";
    	Matcher alphaSpace = Pattern.compile("^[a-zA-Z0-9 ]*$[\\r\\n|\\r|\\n]").matcher(s);
    	if (s=="") {
    		error = ("You have to give your pet train a name! Type a name, then press enter.");
    	}
    	else if (alphaSpace.matches()) {
    		error = ("That's not a good name! Try not using special characters.");
    	}
    	else if (s.length() > 20) {
    		error = ("That name's too long! It should be shorter than 20 characters.");
    	}
    	
    	
    	
    	return error;
    }
    
    FileHandler(String source){
    	fName = source;
	    try{
	    	int i = 0;
	        File petDataFile = new File(fName);
	        Scanner sc1 = new Scanner(petDataFile);
	        while (sc1.hasNextLine()){
	            String data = sc1.nextLine();
	            //System.out.println(data);
	            dataArray[i] = extractData(data);
	            i+=1;
	        }
	        sc1.close();

    
	    } catch (FileNotFoundException e) {
            System.out.println("Error! Could not find a pet train data save file!");
            System.out.println("This could lead to a crash...");
        }
    }
    
    
    
    private PetData extractData(String line) {
    	String[] data = line.split(",");
    	return new PetData(Integer.valueOf(data[0]),data[1],data[2],data[3]);
    }
    
    private int findIndex(String item) {
    	for(PetData i:dataArray) {if (i!=null) {
    		if (item.equals(i.getVarName())){
    			return i.getIndex();
    		}
    		//System.out.println(i.getVarName());
    	}
    	}
    	return 0;
    }
    
    private void save() {
      	 String jarPath = "";
 		
    	try {
 			jarPath = Pet.class
			          .getProtectionDomain()
			          .getCodeSource()
			          .getLocation()
			          .toURI()
			          .getPath();
			FileWriter dataFile = new FileWriter(jarPath.replace("derailed.jar", "").replace("/bin", "")+"petData.csv");
			System.out.println(jarPath.replace("derailed.jar", "")+"petData.csv");
			for(PetData i : dataArray) {
				if(i!=null) {dataFile.write(i.toString());}
	    	}
			dataFile.close();
		} catch (IOException | URISyntaxException e) {
			e.printStackTrace();
		}
    }

    public int getBatteries() {
    	int i = findIndex("batteries");
    	return Integer.valueOf(dataArray[i].getData());
    }
    
    public void setBatteries(int data) {
    	int i = findIndex("batteries");
    	dataArray[i].setData(Integer.toString(data));
    	save();
    }
    
    public String getName() {
    	int i = findIndex("petName");
    	return dataArray[i].getData();
    }
    
    public long getLastFed() {
    	int i = findIndex("lastFed");
    	return Long.valueOf(dataArray[i].getData());
    }
    
    public void setLastFed(long data) {
    	int i = findIndex("lastFed");
    	dataArray[i].setData(Long.toString(data));
    	save();
    }
    
    public int getTimesFed() {
    	int i = findIndex("timesFed");
    	return Integer.valueOf(dataArray[i].getData());
    }
    
    public void setTimesFed(int data) {
    	int i = findIndex("timesFed");
    	dataArray[i].setData(Integer.toString(data));
    	save();
    }
    
    public Double getHappinessChange() {
    	int i = findIndex("happinessChange");
    	return Double.valueOf(dataArray[i].getData());
    }
    
    public void setHappinessChange(Double data) {
    	int i = findIndex("happinessChange");
    	dataArray[i].setData(Double.toString(data));
    	save();
    }
    
    public long getLastSlept() {
    	int i = findIndex("lastSlept");
    	return Long.valueOf(dataArray[i].getData());
    }
    
    public void setLastSlept(long data) {
    	int i = findIndex("lastSlept");
    	dataArray[i].setData(Long.toString(data));
    	save();
    } 
    
    public String getBirthday() {
        int i = findIndex("birthday");
        return dataArray[i].getData();
    }
    
    public void setBirthday(String bday) {
    	int i = findIndex("birthday");
    	dataArray[i].setData(bday);
    	save();
    }
    
    public AbstractGame[] getGames() { 
    	String[] gameNamesString = new String[64];
    	int gamesCount = 0;
 
    	for(PetData i:dataArray) {
    		if (i!=null) {
    			if (i.getVarName().equals("gameClassName")){
    				gameNamesString[gamesCount] = i.getData(); 
    				gamesCount ++;
    			}
    		}
    	}
    	
    	
    	boolean birthday = false;
		char[] dest = new char[5];
		getBirthday().getChars(5, 10, dest, 0);
		String s1 = "";
		for (char c : dest) {
			s1+=c;
		}
		char[] dest2 = new char[5];
		String s2 = "";
		LocalDate.now().toString().getChars(5, 10, dest2, 0);
		for (char c : dest) {
			s2 += c;
		}
		if (s1.equals(s2)) {
			System.out.println("wHYY");
			gamesCount++;
			birthday = true;
		}
		
		
    	AbstractGame[] gamesNames = new AbstractGame[gamesCount];
    	gamesCount = 0;
    	
    	
    	if (birthday) {
    		Object gameObject;
			try {
				gameObject = Class.forName("malware_gotchi.BirthdayGame").getDeclaredConstructor().newInstance();
				AbstractGame gameAbObject = (AbstractGame)gameObject;
				gamesNames[gamesCount] = gameAbObject; 	
				gamesCount++;
			} catch (InstantiationException | IllegalAccessException | IllegalArgumentException
					| InvocationTargetException | NoSuchMethodException | SecurityException
					| ClassNotFoundException e) {
				e.printStackTrace();
			} 
    	}
    	
    	
    	for (String s: gameNamesString) {
    		if (s != null) {
    		Object gameObject;
			try {
				gameObject = Class.forName("malware_gotchi."+ s).getDeclaredConstructor().newInstance();
				AbstractGame gameAbObject = (AbstractGame)gameObject;
				gamesNames[gamesCount] = gameAbObject; 	
				gamesCount++;
			} catch (InstantiationException | IllegalAccessException | IllegalArgumentException
					| InvocationTargetException | NoSuchMethodException | SecurityException
					| ClassNotFoundException e) {
				e.printStackTrace();
			} 
    		}
    	}

    	return gamesNames;
    }
    public String getTrainLine() {
      	int i = findIndex("trainLine");
    	return dataArray[i].getData();
    }
    public int getTrainNum() {
    	int i = findIndex("trainNum");
    	return Integer.valueOf(dataArray[i].getData());
    }
    public String assignTrainLine() {
    	Random random = new Random();
    	int num = random.nextInt(4);
    	String[] trains = {"Blue", "Orange", "Red", "Green"};
    	
    	return trains[num]; 
    }
    
    public int assignTrainNum(String trainLine) {
    	Random random = new Random();
    	int num = 0;
    	switch(trainLine) {
    	case "Blue":
        	num = random.nextInt(94) + 700; //0700 to 0793
        	break;
    		
    	case "Orange":
        	num = random.nextInt(104) + 1402; //1402 to 1505
        	break;
    		
    	case "Red":
    		int[] redLine = {1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 
    				1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 
    				1600, 1601, 1606, 1607, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 
    				1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 
    				1630, 1631, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1644, 1645, 
    				1648, 1649, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 
    				1710, 1711, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 
    				1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 
    				1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1746, 1747, 1748, 1749, 
    				1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1800, 1801, 1802, 1803, 
    				1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 
    				1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 
    				1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 
    				1842, 1843, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 
    				1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 
    				1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 
    				1880, 1881, 1882, 1883, 1884, 1885, 1900, 1901, 1902, 1903, 1904, 1905, 
    				1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913};
        	 num = redLine[random.nextInt(210)]; //1500 to 1913 w/ exceptions


        	 break;

    	case "Green":
    		int[] greenLine = {3600, 3601, 3603, 3604, 3605, 3606, 3607, 3608, 3609, 3610, 
    				3611,  3617, 3618, 3619, 3620, 3621, 3622, 3624, 3625, 3626, 3627, 3628, 
    				3629, 3631, 3632, 3633, 3634, 3635, 3636, 3639, 3640, 3641, 3642, 3643, 
    				3644, 3645, 3646, 3647, 3649, 3651, 3652, 3653, 3654, 3655, 3656, 3659, 
    				3660, 3661, 3662, 3663, 3664, 3668, 3669, 3670, 3671, 3673, 3674, 3675, 
    				3676, 3677, 3678, 3680, 3681, 3682, 3683, 3684, 3685, 3686, 3687, 3688, 
    				3689, 3691, 3692, 3694, 3695, 3696, 3698, 3699, 3700, 3701, 3702, 3704, 
    				3706, 3707, 3708, 3709, 3712, 3713, 3714, 3715, 3716, 3717, 3718, 3800, 
    				3801, 3802, 3804, 3805, 3806, 3809, 3811, 3812, 3813, 3814, 3815, 3816, 
    				3817, 3819, 3820, 3821, 3823, 3824, 3825, 3826, 3827, 3828, 3829, 3830, 
    				3833, 3834, 3835, 3836, 3837, 3838, 3839, 3840, 3841, 3842, 3843, 3844, 
    				3845, 3846, 3848, 3849, 3850, 3851, 3852, 3853, 3855, 3856, 3857, 3858, 
    				3860, 3861, 3862, 3863, 3864, 3865, 3866, 3867, 3868, 3869, 3870, 3871, 
    				3872, 3874, 3875, 3876, 3877, 3878, 3880, 3881, 3882, 3883, 3884, 3885, 
    				3886, 3887, 3888, 3889, 3890, 3891, 3892, 3900, 3901, 3902, 3903, 3904, 
    				3905, 3906, 3907, 3908, 3909, 3910, 3911, 3912, 3913, 3914, 3915, 3916, 
    				3917, 3918, 3919, 3920, 3921, 3922, 3923};
        	num = greenLine[random.nextInt(197)]; //3600 to 3923 w/ exceptions
       
        	break;
    	}
    	save();
		return num;
  
    }
}