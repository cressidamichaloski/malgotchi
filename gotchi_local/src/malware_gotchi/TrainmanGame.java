package malware_gotchi;

import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;

public class TrainmanGame extends AbstractGame{
	private int fails;
	TrainmanGame() {
		file = new FileHandler("petData.csv");
		name = "Trainman";
		batteriesEarned = 6;
		happinessLost = -3.0;
		instructions = "Figure out the trainâ€™s secret word or phrase! \n"
				+ "Each turn, you must guess a letter that you think is in the word. \n"
				+ "Guess wrong, and you add a car to the train. \n"
				+ "If you guess wrong 6 times, the engine will be added, and the train will choo-choo itself away, never letting you make a final guess! \n"
				+ "Get the full word before then, though, and you win!\n"
				+ "(Also donâ€™t worry about the train being late, itâ€™s a freight train, those things expect delays)";
	}
	
	@Override
	protected void play(Scanner sc, Pet myPet) {
		String word = getWord();
		int messageType = 0;
		String letter = "";
		fails = 0;
		happinessEarned = 4;
		
		ArrayList<String> alreadyGuessed = new ArrayList<String>();
		ArrayList<String> wordBlanks = new ArrayList<String>();
		for (int i = 0; i < word.length(); i++) {
			if (word.charAt(i) == ' ') {wordBlanks.add(" ");
			}else {wordBlanks.add("_");
		}
			}
		
		while (fails < 6 && wordBlanks.contains("_")) {
			printTrains();
			System.out.println(" - " + message(messageType) 
			+"\n" + wordBlanks.toString().replace("[", "").replace("]", "").replace(",", ""));
			letter = sc.nextLine();
			
	   		 Boolean go = false;
	   		 while(!go) {
	   			 if (letter.matches("[a-zA-Z]")) { 
	   				 go = true;
	   				 if (letter.matches("[A-Z]")) {
	   					 letter = letter.toLowerCase(); //needs testing
	   				 }
	   			 }
	   			 if(!go) {
	   				 System.out.println("Invalid input. Please try again. ");
	   				 letter = sc.nextLine();
	   			 }
	   		 }
   			 if (alreadyGuessed == null) {
   				alreadyGuessed.add(letter); //idk how to get rid of this warning rip
   				}
   			 if (!alreadyGuessed.contains(letter)) {
   				 alreadyGuessed.add(letter);
   				if (word.toLowerCase().contains(letter)) { //if word contains letter and you havent guessed the letter
   					messageType = 1;
   					for (int j =0; j < word.length(); j++) {
   						if (String.valueOf(word.toLowerCase().charAt(j)).equals(letter)) {
   							wordBlanks.set(j, String.valueOf(word.charAt(j)));
   						}
   					}
   				}else {//if you havent guessed letter but word does not contain letter
   	   				messageType = 2; 
   	   				fails ++;}
   			}else { messageType = 3;}
		}
		printTrains();
		System.out.print(" - ");
		if (fails == 6) {
			System.out.println("NO! And now I have to run! See ya around!");
			lost(myPet);
		}else{
			System.out.println("YES! YOU GOT IT!");
			if (word.contains(" ")){
				System.out.println("The phrase was: " + word);
			}else {System.out.println("The word was: " + word);}
			batteriesEarned = 6 - fails;
			if (fails > 2) {
				happinessEarned = 6 - fails;
			}
			won(myPet);}
	}
	private void printTrains() {
		if (fails == 6) {
			System.out.print("ðŸš‚ðŸšƒðŸšƒðŸšƒðŸšƒðŸšƒðŸšƒ");
			for (int i = 0; i < fails + 1; i++) {
				try {Thread.sleep(1000);
				} catch (InterruptedException e){			
				  e.printStackTrace();}
				System.out.println();
				String printTrains = "";
				for (int t = 0; t < 6 - i; t++) {
					printTrains += "ðŸšƒ";
				}System.out.print(printTrains);
				if (i == 6) {
					System.out.println();
				}
			}
		}else {
			String printTrains = "";
			for (int t = 0; t < fails + 1; t++) {
				printTrains += "ðŸšƒ";
			}
			System.out.print(printTrains);
		}
	}
	private String getWord() {
		Random random = new Random();
		String[] words = {"Red Line", "Green Line", "Blue Line", "Orange Line", "Mattapan Trolley", 
				"Commuter Rail", "Tram", "Trolley", "Light Rail", "Heavy Rail", 
				"Metro", "Subway", "Engine", "Locomotive", "Train Car", "MBTA", 
				"Pantograph", "Third Rail", "Track", "Railroad", "Station", "Ballast", 
				"Slow Zone", "Fire", "North Station", "South Station", "Government Center", 
				"State", "Park Street", "Downtown Crossing", "Boylston", "Alewife", 
				"Ashmont", "Mattapan", "Braintree", "Forest Hills", "Oak Grove", 
				"Bowdoin", "Wonderland", "Medford Tufts", "Union Square", "Boston College", 
				"Cleveland Circle", "Riverside", "Heath Street", "Charlie Card", "Delay", 
				"Lechmere", "Back Bay", "Kenmore", "Copley", "Haymarket"};
		int wordIndex = random.nextInt(words.length);
		return words[wordIndex];
	}
	private String message(int i) {
		switch(i) {
		case 0:
			return "Guess my secret word!\n"
					+ "You have 6 gusses left!";
		case 1:
			return "YES!\n"
					+ "You still have " + (6 - fails) + " guesses left!";
		case 2:
			return "NO! I'm gonna leave too soon at this rate!\n"
					+ "You now have " + (6-fails) + " guesses left!";
		case 3:
			return "You already guessed that, silly! Try again.";
		}
		return "error!";
	}
}