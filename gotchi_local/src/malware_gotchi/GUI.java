package malware_gotchi;

import java.awt.*;        // Using AWT container and component classes
import java.awt.event.*;  // Using AWT event classes and listener interfaces


public class GUI extends Frame {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private TextArea mainText; //system.out equivilant
	private Label inputError; //for error messages from incorrect inputs
	private TextField input; //text input (System.in)
	private TextArea ascii;
	private TextArea stats;
	private Button enter; //for inputting text
	private boolean isInput; //for checking if an input has been done
	
	
	GUI(){
		super.setLayout(new GridBagLayout()); //allows for the grid-esque layout
		GridBagConstraints gbc = new GridBagConstraints(); //sets placement when added
		
		Panel textInput = new Panel(new FlowLayout()); //panels for combined layout of text inpuy
		Panel fullInput = new Panel(new GridLayout(2,1));
		
		enter = new Button("->");
		mainText = new TextArea("HECK");
//		mainText.setBounds(10, 10, 780, 400);
		mainText.setEditable(false);
		//mainText.setMaximumSize(new Dimension(200,200));
		
		input = new TextField("Enter input here.........");	
//		input.setSize(700, 50);
		InputListener listener = new InputListener(); //to activate when input is done
		input.addActionListener(listener);
//		enter.setSize(50, 50);
		textInput.add(input); //put everything in panels
		textInput.add(enter);
		fullInput.add(textInput);
		
		ascii = new TextArea("________________________________________________\r\n"
				+"|                                              |\r\n"
				+"|                                              |\r\n"
				+"|                                              |\r\n"
				+"|                                              |\r\n"
				+"|                                              |\r\n"
				+"|                                              |\r\n"
				+"|                                              |\r\n"
				+"|              \\                /              |\r\n"
				+"|                                              |\r\n"
				+"|              O                O              |\r\n"
				+"|                                              |\r\n"
				+"|                     WWWW                     |\r\n"
				+"|                                              |\r\n"
				+"|                                              |\r\n"
				+"|                                              |\r\n"
				+"|                                              |\r\n"
				+"|                                              |\r\n"
				+"|                                              |\r\n"
				+"|                                              |\r\n"
				+"|______________________________________________|"); //for sizing
		ascii.setEditable(false);
		ascii.setFont(new Font("Monospaced", 0, 6)); //smaller for easier fit
		ascii.setMinimumSize(new Dimension(200,200));
		stats = new TextArea("STATS");
		stats.setEditable(false);
		
		
		
		inputError = new Label();
		inputError.setAlignment(Label.CENTER);
		fullInput.add(inputError);
		
		
		
		gbc.fill = GridBagConstraints.BOTH; //tries to fill where it can
		
		gbc.gridx = 0; //col #
		gbc.gridy = 0; //row #
		gbc.weightx = 0; //for fill
		add(ascii, gbc);
		
		
		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.weightx = 1;
		//gbc.gridwidth = 2;
		add(mainText, gbc);
		
		
		
		gbc.gridx = 2;
		gbc.gridy = 0;
		gbc.weightx = 1.5;
		add(stats, gbc);
		
		


		
		
		gbc.gridx = 0;
		gbc.gridy = 2;
		gbc.gridwidth = 3;
		add(fullInput, gbc);
		

		
		addWindowListener(new MyWindowListener()); //so program closes on hitting 'x'
		
		setTitle("!!Malware!!");
		setSize(900,400);
		setVisible(true);
		resetText();
	}
	
	public String menu(String[] options) { //for menu with options
		System.out.println("Entered function");
		
		
		String response = getInput();
		System.out.println("Collected first response");
		input.setText("");
		if (response.endsWith("\n")) {
			response = response.substring(0,response.length()-1);
		}
		
	
		boolean go = false;
        while(!go) {
        	System.out.println("While looped");
        	for(String i:options) {
        		if(response.equals(i)){
        			go = true;
        			System.out.println("Correct Input");
        		}
        	}
        	if(!go) {
        		inputError.setText("Invalid input. Please try again...");
        		System.out.println("Incorrect Input");
        		response = getInput();
        		input.setText("");
        	}
        }
        
        resetText();
        
		return (response);
	}
	
	public String menu() { //for general input (numbers, names, etc)
		String response = getInput();
		if (response.endsWith("\n")) {
			response = response.substring(0,response.length()-1);
		}
		resetText();
		return response;
		
	}
	
	public String menu(String error) { //error on input
		inputError.setText(error);
		String response = getInput();
		if (response.endsWith("\n")) {
			response = response.substring(0,response.length()-1);
		}
		resetText();
		return response;
		
	}
	
	public void appendMain(String s) { //add to main, with new line
		mainText.append(s+"\n");
	}
	
	public void appendMain(String s, boolean doNewLine) { //add to main, new line optional
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		if (doNewLine) {
			mainText.append(s+"\n");
		} else {
			mainText.append(s);
		}
	}
	
	public void setStats(String newStats) { //set stats field
		stats.setText(newStats);
	}
	
	public void setAscii(String newAscii) { //set ascii field
		ascii.setText(newAscii);
	}
	
	
	private String getInput() { //get input from user
		isInput = false;
		while(!isInput) { //waits for response from listener
			try {
				Thread.sleep(50); //don't want it to run too hard lmao
			} catch (InterruptedException e) {
				
			}
		}
		return input.getText();
	}
	
	private class InputListener implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent evt) { //on enter hit
			System.out.println("Input registered");
			isInput = true;
		}
	}
	
	private void resetText() { //reset variable text fields (main, error, input)
		mainText.setText("");
		inputError.setText("");
		input.setText("");
	}
	
	private class MyWindowListener implements WindowListener { //for closure detection
		@Override
		public void windowClosing(WindowEvent evt) {
		   System.exit(0);  // Terminate the program
		}
        // Not Used, BUT need to provide an empty body to compile.
        @Override public void windowOpened(WindowEvent evt) { }
        @Override public void windowClosed(WindowEvent evt) { }
        // For Debugging
        @Override public void windowIconified(WindowEvent evt) { System.out.println("Window Iconified"); }
        @Override public void windowDeiconified(WindowEvent evt) { System.out.println("Window Deiconified"); }
        @Override public void windowActivated(WindowEvent evt) { System.out.println("Window Activated"); }
        @Override public void windowDeactivated(WindowEvent evt) { System.out.println("Window Deactivated"); }
		
	
	}
}